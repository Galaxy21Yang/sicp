
(define (parse exp)
  (display (format "parse: ~A ~%" exp))
  (cond ((number? exp) (make-number-value exp))
		((string? exp) (make-string-value exp))
		((symbol? exp) (make-variable exp))
		((pair? exp)
		 (let ((operator (car exp)))
		   (cond ((eq? operator 'quote)  (make-quotation exp))
				 ((eq? operator 'set!)   (make-assginment exp))
				 ((eq? operator 'define) (make-definition exp))
				 ((eq? operator 'if)     (make-if exp))
				 ((eq? operator 'lambda) (make-lambda exp))
				 ((eq? operator 'begin)  (make-sequence exp))
				 (else (make-application exp)))))
		(else
		 (error "parse: unknown expression: " exp))))
